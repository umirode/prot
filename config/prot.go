// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package config generated by go-bindata.// sources:
// templates/prot.yaml
// templates/schema.json
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesProtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xcb\xaa\xc2\x30\x10\x06\xe0\x7d\x9f\x62\x9e\xa0\xd9\xcf\xea\x1c\x04\x51\xaa\x52\x44\x70\x29\xbd\x8c\xc9\x40\xd3\x09\xc9\x64\x91\xb7\x17\xf1\x52\x44\x77\x73\xf9\xff\x6f\xd7\xcd\x16\xc1\x4a\xb5\x97\x31\x4f\x94\xb0\x02\x78\x8c\x87\xce\xd3\x7d\x03\x38\x52\x90\xc4\x2a\xb1\x20\x38\xd5\x90\xd0\x18\xcb\xea\x72\x5f\x0f\xe2\x4d\xf6\x1c\x65\x24\x13\xa2\x68\x6d\x59\x3f\x84\x33\xab\xfb\xcf\xea\xbe\x25\xcb\xfa\xb7\x28\xf8\x43\x01\x58\x9a\x00\xa7\x12\x08\xa1\xcd\xfd\xc4\x43\x43\x25\x3d\xcf\x2b\x99\xaf\x6c\x5f\x21\x80\x96\xfc\x9a\x27\x42\xe0\xf1\x12\x53\x57\x07\xf2\xef\xdf\xd6\xce\x12\x69\x23\x49\x1b\x2a\x08\x1a\x33\xdd\x02\x00\x00\xff\xff\x60\x44\x55\x55\x00\x01\x00\x00")

func templatesProtYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesProtYaml,
		"templates/prot.yaml",
	)
}

func templatesProtYaml() (*asset, error) {
	bytes, err := templatesProtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/prot.yaml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1585202484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x58\xde\x1e\x60\xb5\x25\x7b\x43\xf4\xb6\x20\x21\xd0\xf2\x51\x21\xb8\x50\x05\xe4\xb6\xd3\xd6\x4b\x1a\x17\xdb\x11\x2a\x4b\xfe\x3b\xb2\xd3\xa4\xb6\x63\x27\xb4\xdb\xa0\xfd\xea\xa1\x49\xe6\xcd\x8c\xe7\x8d\x3d\x6f\xb3\xbd\xee\x21\x84\xfb\x62\xba\x84\x15\xc1\x43\x84\x97\x52\xae\x87\x51\x74\x25\x58\x3a\x28\xac\xcf\x18\x5f\x44\x33\x4e\xe6\x72\x70\xfe\x3c\x2a\x6c\x27\xf8\x4c\xc5\xc9\xcd\x1a\x54\x10\x9b\x5c\xc1\x54\x16\x36\x0e\x3f\x33\xca\x61\x86\x87\x68\xdc\x43\x08\x21\xfc\x8e\xa4\x0b\x8d\x21\x84\xdf\xb3\x59\x96\x80\xc0\x3d\x84\x62\xed\xbe\xe6\x6c\x0d\x5c\x52\x10\x78\x88\xae\x8d\x80\xf2\x49\x95\x47\x55\x36\x7c\x12\xed\x9c\x23\x23\xa9\x51\x88\x90\x9c\x9a\x76\x48\xb3\x55\x55\x88\xb6\x2c\x58\x85\x22\x84\x67\x84\x4b\xbc\x7d\x8c\xf5\x35\x77\x0a\x6d\x29\xa3\x74\xab\x55\x62\xb4\xa4\x58\x09\xe6\x24\x4b\xa4\xca\x97\x57\xc6\x6d\xa2\xcd\x07\xb2\xb2\x96\x52\x10\x91\x12\x78\xaa\x52\x3d\xf9\x36\x26\x83\xdf\xf1\x9f\xf1\xc5\xe0\xeb\xf9\xe0\x45\xfc\x54\x3f\x9e\xf6\xcb\xc2\x8d\x7c\x45\xd0\xa8\xde\x53\x0d\x07\x13\x99\x5e\xcd\x44\x23\x9d\xe2\x7b\x5c\x7c\x9f\xf6\x8d\x66\x86\xc9\x6b\xac\x76\x2e\x2a\xe4\x13\xac\x99\xa0\x92\xf1\x0d\x36\x80\xd8\x8a\xf6\x1c\x13\x5f\xbc\x8b\xed\x47\x26\x32\x32\x9d\xb9\x79\x9c\x23\x66\xc1\xb9\xed\x8d\x2f\x32\xb9\xbc\x69\x2d\x3a\x47\xb0\x0a\x4f\x87\x9b\xbb\xac\xd1\xcf\x2a\xda\x8d\x41\x08\xbf\x62\xe9\x9c\x3a\x9c\x9c\x1d\x40\x2d\xbb\xb0\xcb\xef\x43\x0e\xe0\x1e\x6d\x8b\xaa\x97\x1b\x9e\x77\xcb\xa7\x36\xfb\x16\x3a\xca\x26\x09\x9d\x5e\xc2\x46\x78\xa3\x95\x07\x11\xe2\x17\xe3\xb3\x10\xfe\x92\x08\x3a\xf5\xee\x52\xd9\x0d\xf6\x03\x52\xb7\xa9\xa8\x52\x1a\xf3\x93\x3b\x96\xbc\xd6\x7a\x92\x24\x1f\xe7\x5e\x3a\xde\x6e\xd3\x79\x60\x1f\xda\x77\xb1\xac\x3e\xbc\x97\x5b\x8f\x29\x4b\x85\x12\x34\xb3\x97\x01\x6f\x97\x5f\xd8\x5a\x63\xae\x97\x92\x4b\x48\x6f\x4a\x68\x7b\x9e\x1a\x29\x35\x8e\x8f\xe1\x37\x82\xd5\x6b\x9a\x40\x88\xae\x67\x76\xf6\x2d\xd7\x5a\xa6\xd9\xed\xf0\xe1\x8a\xca\x05\xc2\xd5\xa2\x36\xed\xb3\x3f\xde\xed\x73\xf9\x54\x93\xd5\x35\xaf\x96\x11\x3e\x3a\xbf\x2f\x02\x78\x77\xa4\x74\xf6\xfd\x98\xb4\x78\xef\x5e\x4a\xf0\x82\xca\xc3\x79\xbf\x5d\xa4\x8c\xc3\x1b\x26\xe4\x25\xf8\xfe\x08\x1f\xa9\x01\xf6\x32\xff\xd8\x89\x09\x63\x09\x10\xaf\x0e\x57\xe4\x82\x58\x08\xd9\x43\xcf\xea\x5a\x5f\x2f\xfc\x16\x48\x78\x39\x29\x0f\x44\xc0\x5b\x67\xa9\xb5\x23\xc7\xd2\xf8\x5b\xa7\x19\x87\xab\x7b\xf7\xb2\x7e\x7c\x3d\x7f\x1c\xfd\xdd\x7b\xec\x03\x9a\xfd\x94\xac\x9a\xdf\x7a\xfe\xeb\xfc\xeb\x6a\x3a\xd5\x80\x56\xbe\x8f\x3a\xb0\x27\x72\xef\x74\x20\xf8\xef\xaa\x9f\x43\xc8\x7a\x37\x34\xa0\x91\xec\xb1\x46\xbb\x58\xa4\xb3\x29\x28\xd2\xdf\xd5\x11\x70\x2c\xf6\x6f\x22\x26\xba\xbb\x2f\xef\x8a\xab\xfa\xce\x7b\x79\xef\x6f\x00\x00\x00\xff\xff\x6e\x00\x76\x5c\xc2\x16\x00\x00")

func templatesSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemaJson,
		"templates/schema.json",
	)
}

func templatesSchemaJson() (*asset, error) {
	bytes, err := templatesSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schema.json", size: 5826, mode: os.FileMode(420), modTime: time.Unix(1585395909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/prot.yaml":   templatesProtYaml,
	"templates/schema.json": templatesSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"prot.yaml":   &bintree{templatesProtYaml, map[string]*bintree{}},
		"schema.json": &bintree{templatesSchemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

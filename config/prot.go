// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package config generated by go-bindata.// sources:
// templates/prot.yaml
// templates/schema.json
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesProtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xcb\xaa\xc2\x30\x10\x06\xe0\x7d\x9f\x62\x9e\xa0\xd9\xcf\xea\x1c\x04\x51\xaa\x52\x44\x70\x29\xbd\x8c\xc9\x40\xd3\x09\xc9\x64\x91\xb7\x17\xf1\x52\x44\x77\x73\xf9\xff\x6f\xd7\xcd\x16\xc1\x4a\xb5\x97\x31\x4f\x94\xb0\x02\x78\x8c\x87\xce\xd3\x7d\x03\x38\x52\x90\xc4\x2a\xb1\x20\x38\xd5\x90\xd0\x18\xcb\xea\x72\x5f\x0f\xe2\x4d\xf6\x1c\x65\x24\x13\xa2\x68\x6d\x59\x3f\x84\x33\xab\xfb\xcf\xea\xbe\x25\xcb\xfa\xb7\x28\xf8\x43\x01\x58\x9a\x00\xa7\x12\x08\xa1\xcd\xfd\xc4\x43\x43\x25\x3d\xcf\x2b\x99\xaf\x6c\x5f\x21\x80\x96\xfc\x9a\x27\x42\xe0\xf1\x12\x53\x57\x07\xf2\xef\xdf\xd6\xce\x12\x69\x23\x49\x1b\x2a\x08\x1a\x33\xdd\x02\x00\x00\xff\xff\x60\x44\x55\x55\x00\x01\x00\x00")

func templatesProtYamlBytes() ([]byte, error) {
	return bindataRead(
		_templatesProtYaml,
		"templates/prot.yaml",
	)
}

func templatesProtYaml() (*asset, error) {
	bytes, err := templatesProtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/prot.yaml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1585202484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x8c\xbc\x3d\xc0\x6a\x4b\xf6\x86\xe8\x6d\x85\x84\x40\xcb\x47\x85\xe0\x42\x15\x90\xdb\x4e\x5b\xaf\xd2\xb8\xd8\x8e\x50\x59\xf2\xdf\x91\x9d\x8f\xda\x8e\x9d\xd0\x2e\xbb\x3d\xb4\xc9\xbc\x99\x37\xef\x8d\x1d\xa7\xf7\x23\x00\x32\x96\xcb\x2d\xee\x28\x99\x02\xd9\x2a\xb5\x9f\x26\xc9\x9d\xe4\xf9\xa4\x8a\xbe\xe0\x62\x93\xac\x04\x5d\xab\xc9\xf5\xcb\xa4\x8a\x5d\x90\x2b\x5d\xa7\x0e\x7b\xd4\x45\x7c\x71\x87\x4b\x55\xc5\x04\xfe\x2c\x98\xc0\x15\x99\xc2\x7c\x04\x00\x40\xde\xd3\x7c\x63\x30\x00\xf2\x81\xaf\x8a\x0c\x25\x19\x01\xa4\x26\x7d\x2f\xf8\x1e\x85\x62\x28\xc9\x14\xee\xad\x82\xe6\x4e\xcb\x63\x9a\x8d\x5c\x24\xc7\xe4\xc4\x22\xb5\x84\x48\x25\x98\x1d\xc7\xbc\xd8\xb5\x42\x4c\x64\xc3\x5b\x14\x80\xac\xa8\x50\xa4\xbe\x4d\xcd\x6f\xe9\x09\x1d\x90\xd1\xa4\x75\x94\x58\x23\xa9\x3a\xe1\x9a\x16\x99\xd2\x7c\x65\x1b\xac\x89\x0e\x1f\xe9\xce\x69\xa5\x21\xaa\x14\x8a\x5c\x53\x3d\xfb\x3e\xa7\x93\xdf\xe9\x9f\xf9\xcd\xe4\xdb\xf5\xe4\x55\xfa\xdc\xdc\x5e\x8e\x1b\xe1\x16\x5f\x55\x34\xeb\xce\xd4\xc0\x51\x22\x3b\xab\xdf\x68\x62\x28\x7e\xa4\xd5\xf7\xe5\xd8\x1a\x66\xdc\xbc\xc1\x3a\xfb\xa2\x45\x3e\xe3\x9e\x4b\xa6\xb8\x38\x10\x0b\x48\x9d\xea\xc0\x36\x09\xd5\xfb\xd8\x69\x66\x12\x8b\xe9\xca\xe7\xf1\xb6\x98\x03\x97\x6e\x36\xb9\x29\xd4\xf6\xa1\x5a\x0c\x47\x54\x45\x60\xc2\xfd\x53\x36\xe8\x17\x5d\xed\xd7\x00\x90\xd7\x3c\x5f\x33\xcf\x93\xb7\x02\x30\xb0\x0a\x47\xfe\x10\x72\x86\xf7\xa4\x16\xd5\x95\x1b\x7f\xde\x9d\x9c\xce\xb3\xef\xa0\xb3\x62\x91\xb1\xe5\x2d\x1e\xa4\x6f\x1b\xda\xb3\xc0\xfe\x94\x5e\xa4\xec\x0c\x87\x66\xd9\xa7\x75\xb0\x61\x70\x1e\x6c\x1d\x99\xd4\xf0\x9c\xeb\xac\x9e\x69\xd7\x19\x4b\x9e\x4b\x7d\xe4\x0c\xb8\x0d\xf9\x8b\x47\x3b\xce\x4d\x2b\xb5\xc5\xfc\xa1\x86\xea\x15\xef\xb5\xd4\xbb\xc1\xad\xbc\x19\xee\xde\xb0\x0c\x63\x76\x03\xbb\xfb\x54\xb9\x4e\x9b\xfe\xb4\xf3\xb7\x7f\xd2\x34\x88\xab\x85\xa1\xd3\xc9\xfd\x04\x97\xcf\xf7\x33\xa3\x52\xfe\xe2\x62\xf5\xe8\xbe\xda\x46\x4f\xe4\xef\xab\x44\xf1\x78\xa6\x0c\xfb\x69\x4e\x06\xb2\x8f\x7f\x1b\xc8\x86\xa9\xf3\x7d\xbf\xdb\xe4\x5c\xe0\x5b\x2e\xd5\x2d\x86\x5e\x93\xff\x69\x00\x6e\x9b\x7f\x9c\xc4\x82\xf3\x0c\x69\xde\x6b\x2e\x8a\xc5\x90\x13\xce\xb3\xc1\xb3\xde\x7d\x1b\xd8\xe8\xf1\xba\xb9\xaa\x7e\xf5\x77\x39\x2a\x47\x7f\x03\x00\x00\xff\xff\xba\x46\x60\x84\x5e\x0b\x00\x00")

func templatesSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemaJson,
		"templates/schema.json",
	)
}

func templatesSchemaJson() (*asset, error) {
	bytes, err := templatesSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schema.json", size: 2910, mode: os.FileMode(420), modTime: time.Unix(1585214084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/prot.yaml":   templatesProtYaml,
	"templates/schema.json": templatesSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"prot.yaml":   &bintree{templatesProtYaml, map[string]*bintree{}},
		"schema.json": &bintree{templatesSchemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
